// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThesisDbApp.Data;

#nullable disable

namespace ThesisDbApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221225164651_Branches")]
    partial class Branches
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "273e3004-ddf3-4330-90e0-a2958dfa5f6b",
                            ConcurrencyStamp = "3430f1e1-89b6-43e0-b333-63544147e83c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "25ce1e17-b7fa-47d6-b0d8-e45cf0c2b845",
                            RoleId = "273e3004-ddf3-4330-90e0-a2958dfa5f6b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyWebDbApp.Areas.Identity.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "32d77755-b75c-4fac-a3ee-d6d116ead346",
                            AccessFailedCount = 0,
                            BranchId = 1,
                            ConcurrencyStamp = "6ccd3533-4e31-41b0-bc92-aa88ad911157",
                            Email = "erika@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ERIKA@ABC.COM",
                            NormalizedUserName = "ERIKA@ABC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIL/qOcVgbMDr1ZXWowFZhUdj2TXEA1zVS6J3FStRm6qmdkvUMx2EkJnMnWUIwNzyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f7e4364-68ff-4d1e-995a-3c528843ea9a",
                            TwoFactorEnabled = false,
                            UserName = "erika@abc.com"
                        },
                        new
                        {
                            Id = "334da8d4-da44-458f-bb8f-255d448dfa0d",
                            AccessFailedCount = 0,
                            BranchId = 2,
                            ConcurrencyStamp = "673a9c52-20ff-4feb-b71a-0f26fe588759",
                            Email = "john@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@ABC.COM",
                            NormalizedUserName = "JOHN@ABC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECg9wqkTcxUMOt6kHSXx1bLD6FrIHzj84G29b0I6gQ93b+RzvU51y9c4Idh/cUPxKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "688d7e0c-3ccc-40e6-8e00-3d74c6c4dcaa",
                            TwoFactorEnabled = false,
                            UserName = "john@abc.com"
                        },
                        new
                        {
                            Id = "d3ab4607-a098-4628-a594-bc2b08573f5e",
                            AccessFailedCount = 0,
                            BranchId = 3,
                            ConcurrencyStamp = "f06d46b2-a538-4485-9668-9d84a3ed21c3",
                            Email = "sakura@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SAKURA@ABC.COM",
                            NormalizedUserName = "SAKURA@ABC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4ymlNXQhdnpGMIIV0OI+ieH0m6wskF2uon1z7xV8DeUSIoZKVTcaefaUTA47IjUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "baad417a-d54e-4c27-bcd6-7e4439e26400",
                            TwoFactorEnabled = false,
                            UserName = "sakura@abc.com"
                        },
                        new
                        {
                            Id = "25ce1e17-b7fa-47d6-b0d8-e45cf0c2b845",
                            AccessFailedCount = 0,
                            BranchId = 2,
                            ConcurrencyStamp = "b5b33492-7655-49a0-a5f9-9a1d510f67cc",
                            Email = "admin@abc.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ABC.COM",
                            NormalizedUserName = "ADMIN@ABC.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMw3ktUNa2VzYkd1bvU6Q0vyUWtCnOW2C/ukChhZU2LleqEC+5G/3GWIslim7IubJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5eb82af4-3f9f-4dd9-9ff6-2e059c5d2a98",
                            TwoFactorEnabled = false,
                            UserName = "admin@abc.com"
                        });
                });

            modelBuilder.Entity("MyWebDbApp.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wuerzburg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "New York"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tokyo"
                        });
                });

            modelBuilder.Entity("MyWebDbApp.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShareBonds")
                        .HasColumnType("int");

                    b.Property<int>("ShareStocks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1964, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "franziska.gamma@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Franziska Gamma",
                            ShareBonds = 44,
                            ShareStocks = 56
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1953, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EMail = "christian.epsilon@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Christian Epsilon",
                            ShareBonds = 22,
                            ShareStocks = 78
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1960, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "berta.omega@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Berta Omega",
                            ShareBonds = 97,
                            ShareStocks = 3
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(1993, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EMail = "egon.alpha@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Egon Alpha",
                            ShareBonds = 92,
                            ShareStocks = 8
                        },
                        new
                        {
                            Id = 5,
                            Birthday = new DateTime(1998, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "egon.gamma@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Egon Gamma",
                            ShareBonds = 98,
                            ShareStocks = 2
                        },
                        new
                        {
                            Id = 6,
                            Birthday = new DateTime(1984, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EMail = "franziska.alpha@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Franziska Alpha",
                            ShareBonds = 90,
                            ShareStocks = 10
                        },
                        new
                        {
                            Id = 7,
                            Birthday = new DateTime(1997, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EMail = "daniela.omega@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Daniela Omega",
                            ShareBonds = 13,
                            ShareStocks = 87
                        },
                        new
                        {
                            Id = 8,
                            Birthday = new DateTime(1966, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "berta.gamma@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Berta Gamma",
                            ShareBonds = 76,
                            ShareStocks = 24
                        },
                        new
                        {
                            Id = 9,
                            Birthday = new DateTime(1997, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "daniela.gamma@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Daniela Gamma",
                            ShareBonds = 20,
                            ShareStocks = 80
                        },
                        new
                        {
                            Id = 10,
                            Birthday = new DateTime(1962, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EMail = "anton.omega@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Anton Omega",
                            ShareBonds = 16,
                            ShareStocks = 84
                        },
                        new
                        {
                            Id = 11,
                            Birthday = new DateTime(1988, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EMail = "daniela.delta@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Daniela Delta",
                            ShareBonds = 96,
                            ShareStocks = 4
                        },
                        new
                        {
                            Id = 12,
                            Birthday = new DateTime(1985, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EMail = "franziska.alpha@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Franziska Alpha",
                            ShareBonds = 72,
                            ShareStocks = 28
                        },
                        new
                        {
                            Id = 13,
                            Birthday = new DateTime(1997, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "daniela.beta@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Daniela Beta",
                            ShareBonds = 77,
                            ShareStocks = 23
                        },
                        new
                        {
                            Id = 14,
                            Birthday = new DateTime(1973, 8, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EMail = "egon.alpha@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Egon Alpha",
                            ShareBonds = 6,
                            ShareStocks = 94
                        },
                        new
                        {
                            Id = 15,
                            Birthday = new DateTime(1973, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "franziska.gamma@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Franziska Gamma",
                            ShareBonds = 2,
                            ShareStocks = 98
                        },
                        new
                        {
                            Id = 16,
                            Birthday = new DateTime(1975, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EMail = "berta.omega@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Berta Omega",
                            ShareBonds = 8,
                            ShareStocks = 92
                        },
                        new
                        {
                            Id = 17,
                            Birthday = new DateTime(1981, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 3,
                            EMail = "franziska.omega@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Franziska Omega",
                            ShareBonds = 8,
                            ShareStocks = 92
                        },
                        new
                        {
                            Id = 18,
                            Birthday = new DateTime(1967, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 1,
                            EMail = "franziska.beta@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Franziska Beta",
                            ShareBonds = 85,
                            ShareStocks = 15
                        },
                        new
                        {
                            Id = 19,
                            Birthday = new DateTime(1959, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "egon.omega@uni-wuerzburg.de",
                            Gender = 0,
                            Name = "Egon Omega",
                            ShareBonds = 41,
                            ShareStocks = 59
                        },
                        new
                        {
                            Id = 20,
                            Birthday = new DateTime(1998, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BranchId = 2,
                            EMail = "egon.epsilon@uni-wuerzburg.de",
                            Gender = 1,
                            Name = "Egon Epsilon",
                            ShareBonds = 86,
                            ShareStocks = 14
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MyWebDbApp.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MyWebDbApp.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebDbApp.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MyWebDbApp.Areas.Identity.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebDbApp.Areas.Identity.Data.AppUser", b =>
                {
                    b.HasOne("MyWebDbApp.Models.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("MyWebDbApp.Models.Customer", b =>
                {
                    b.HasOne("MyWebDbApp.Models.Branch", "Branch")
                        .WithMany("Customers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("MyWebDbApp.Models.Branch", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
